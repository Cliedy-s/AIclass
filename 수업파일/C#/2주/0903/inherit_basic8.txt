using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp0903
{
    class Person
    {
        private string strFName;
        private string strLName;

        public string FirstName
        {
            get { return strFName; }
            set { strFName = value; }
        }        

        public string LastName
        {
            get { return strLName; }
            set { strLName = value; }
        }

        public Person(string strFName, string strLName)
        {
            this.strFName = strFName;
            this.strLName = strLName;
        }

        public virtual void Show()
        {
            Console.WriteLine("==============Person===========");
            Console.WriteLine(" First Name: {0}", strFName);
            Console.WriteLine(" Last  Name: {0}", strLName);
            Console.WriteLine("===============================");
        }

        //override 로 정의한 메서드는 virtual(가상메서드) 을 정의하지 않아도,
        //자식클래스에서 가상메서드가 될 수 있다.
        public override string ToString()
        {
            return string.Format("{0} {1}", FirstName, LastName);
        }

        public override bool Equals(object obj)
        {
            return obj is Person person &&
                   strFName == person.strFName &&
                   strLName == person.strLName &&
                   FirstName == person.FirstName &&
                   LastName == person.LastName;
        }

        public override int GetHashCode()
        {
            var hashCode = -226693028;
            hashCode = hashCode * -1521134295 + EqualityComparer<string>.Default.GetHashCode(strFName);
            hashCode = hashCode * -1521134295 + EqualityComparer<string>.Default.GetHashCode(strLName);
            hashCode = hashCode * -1521134295 + EqualityComparer<string>.Default.GetHashCode(FirstName);
            hashCode = hashCode * -1521134295 + EqualityComparer<string>.Default.GetHashCode(LastName);
            return hashCode;
        }

        public static bool operator ==(Person left, Person right)
        {
            return EqualityComparer<Person>.Default.Equals(left, right);
        }

        public static bool operator !=(Person left, Person right)
        {
            return !(left == right);
        }

    }

    class Employee:Person
    {
        int iEmployeeID;

        public Employee(int employeeId) : base("아", "이유")
        {
            this.iEmployeeID = employeeId;
        }

        public override void Show()
        {
            Console.WriteLine("==============Employee===========");
            Console.WriteLine(" EmployeeID: {0}", this.iEmployeeID);
            Console.WriteLine(" First Name: {0}", this.FirstName);
            Console.WriteLine(" Last  Name: {0}", this.LastName);
            Console.WriteLine("=================================");
        }

        public override string ToString()
        {
            return string.Format("{0}/{1} {2}", iEmployeeID, FirstName, LastName);
        }
    }

    class inherit_basic
    {
        static void Main(string[] args)
        {
            Person per = new Person("아", "이유");
            //per.FirstName = "아";
            //per.LastName = "이유";
            per.Show();
            Console.WriteLine(per.ToString());

            Employee emp1 = new Employee(2019005);
            emp1.FirstName = "방탄";
            emp1.LastName = "소년단";
            emp1.Show(); //Employee의 SHow()

            //override 없이 ToString()을 호출하면 클래스의 fullname 이 나온다.
            Console.WriteLine(emp1.ToString());

            //virtual - override 의 경우
            //형변환을 했어도, 원래 태생의 메서드가 실행

            //X - new 의 경우
            //형변환의 태생과 상관없이 무조건 현재 타입의 메서드가 실행


            //상속에 의한 형변환
            //부모 => 자식 : 명시적 형변환으로 컴파일은 가능함. 
            //                그러나, 실행시 오류가 날수도 있고 정상실행될 수도 있다.
            //자식 => 부모 : 암시적 형변환으로 가능함.
            //형제 => 형제 : 암시적, 명시적 형변환 모두 컴파일 오류.
            Person per2 = emp1; 
            per2.Show(); //Person Show() 


            //명시적 형변환을 했어도 실행시 오류
            //실행시 발생할지도 모르는 오류를 위해서 as, is 연산자를 사용
            //as 연산자 : 형변환이 가능하면 변환된 인스턴스를 반환, 
            //           형변환이 불가능하면 null을 반환.

            //is 연산자 : bool 타입으로 반환 (true/false)
            //           형변환이 실제 일어나서 인스턴스를 반환하는 것이 아니고,
            //           형변환이 가능한지 안한지를 반환(즉, true를 반환했을때 형변환해야함)

            //Employee emp2 = (Employee)per;
            //emp2.Show();

            Employee emp2 = per as Employee;
            if (emp2 != null)
            {
                emp2.Show();
            }

            if (per is Employee)
            {
                Employee emp4 = (Employee)per;
                emp4.Show();
            }

            Employee emp3 = (Employee)per2;
            emp3.Show();

            Person per0 = new Person("아", "이유");
            Person per9 = new Person("아", "이유");

            Console.WriteLine(per0.GetHashCode());
            Console.WriteLine(per9.GetHashCode());

            bool bFlag = (per0 == per9); //값을 비교
            Console.WriteLine(bFlag);
            bFlag = (per0.Equals(per9)); //인스턴스를 비교
            Console.WriteLine(bFlag);

            string str1 = "홍길동";
            string str2 = "홍길동";
            bFlag = (str1 == str2); //값을 비교
            Console.WriteLine(bFlag);
            bFlag = (str1.Equals(str2)); //인스턴스를 비교
            Console.WriteLine(bFlag);
        }
    }
}
