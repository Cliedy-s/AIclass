using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data.SqlClient;
using System.Data;
using IceCreamManager.VO;

namespace IceCreamManager.DAC
{
    public class MaterialsDAC : DACParent
    {
        #region offerer
        public List<MaterialsVO> SelectAll()
        {
            using (SqlCommand comm = new SqlCommand())
            {
                comm.Connection = new SqlConnection(Connstr);
                comm.CommandText = "GetAllMaterials";
                comm.CommandType = CommandType.StoredProcedure;

                comm.Connection.Open();
                SqlDataReader read = comm.ExecuteReader();
                List<MaterialsVO> list = Helper.DataReaderMapToList<MaterialsVO>(read);
                comm.Connection.Close();

                return list;
            }
        }
        public bool Insert_Update(MaterialsVO list)
        {
            using (SqlCommand cmd = new SqlCommand())
            {
                cmd.Connection = new SqlConnection(Connstr);
                cmd.CommandText = "MaterialsInsert_Update";
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                
                cmd.Parameters.AddWithValue("@mat_No", list.mat_No);
                cmd.Parameters.AddWithValue("@mtt_No", list.mtt_No);
                cmd.Parameters.AddWithValue("@off_No", list.off_No);
                cmd.Parameters.AddWithValue("@mat_Name", list.mat_Name);
                cmd.Parameters.AddWithValue("@mat_Cost", list.mat_Cost);
                cmd.Parameters.AddWithValue("@mat_Each", list.mat_Each);
                cmd.Parameters.AddWithValue("@mat_MinSize", list.mat_MinSize);
                cmd.Parameters.AddWithValue("@mat_Unit", list.mat_Unit);

                cmd.Connection.Open();
                var rowsAffected = cmd.ExecuteNonQuery();
                cmd.Connection.Close();
                return rowsAffected > 0;
            }
        }
        public int Insert_Update_GetID(MaterialsVO list)
        {
            using (SqlCommand cmd = new SqlCommand())
            {
                cmd.Connection = new SqlConnection(Connstr);
                cmd.CommandText = "MaterialsInsert_Update_GetID";
                cmd.CommandType = System.Data.CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@mat_No", list.mat_No);
                cmd.Parameters.AddWithValue("@mtt_No", list.mtt_No);
                cmd.Parameters.AddWithValue("@off_No", list.off_No);
                cmd.Parameters.AddWithValue("@mat_Name", list.mat_Name);
                cmd.Parameters.AddWithValue("@mat_Cost", list.mat_Cost);
                cmd.Parameters.AddWithValue("@mat_Each", list.mat_Each);
                cmd.Parameters.AddWithValue("@mat_MinSize", list.mat_MinSize);
                cmd.Parameters.AddWithValue("@mat_Unit", list.mat_Unit);

                cmd.Connection.Open();
                int id = Convert.ToInt32(cmd.ExecuteScalar());
                cmd.Connection.Close();
                return id;
            }
        }
        public bool Delete(int id)
        {
            using (SqlCommand comm = new SqlCommand())
            {
                comm.Connection = new SqlConnection(Connstr);
                comm.CommandText = "MaterialsDelete";
                comm.CommandType = CommandType.StoredProcedure;
                comm.Parameters.AddWithValue("@mat_No", id);

                comm.Connection.Open();
                var rowsAffected = comm.ExecuteNonQuery();
                comm.Connection.Close();


                return rowsAffected > 0;
            }

        }

        #endregion

        public bool IsIDValid(int no)
        {
            using (SqlCommand comm = new SqlCommand())
            {
                comm.Connection = new SqlConnection(Connstr);
                comm.CommandText = "SELECT count(*) FROM Materials WHERE mat_No = @mat_No";
                comm.CommandType = CommandType.Text;

                comm.Parameters.AddWithValue("@mat_No", no);

                comm.Connection.Open();
                int result = Convert.ToInt32(comm.ExecuteScalar());
                comm.Connection.Close();

                if (result > 0)
                    return true;
                return false;
            }
        }

        #region BOM
        public List<MaterialsVO> SelectAllBOMExistingList()
        {
            using (SqlCommand comm = new SqlCommand())
            {
                comm.Connection = new SqlConnection(Connstr);
                comm.CommandText = "GetAllBOMExistMaterialList";
                comm.CommandType = CommandType.StoredProcedure;

                comm.Connection.Open();
                SqlDataReader reader = comm.ExecuteReader();
                List<MaterialsVO> allList = Helper.DataReaderMapToList<MaterialsVO>(reader);
                comm.Connection.Close();

                return allList;
            }
        }
        public List<MaterialsVO> SelectAllMaterialsNotExistInProduct()
        {
            using (SqlCommand comm = new SqlCommand())
            {
                comm.Connection = new SqlConnection(Connstr);
                comm.CommandText = "GetAllMaterialsNotExistInProduct";
                comm.CommandType = CommandType.StoredProcedure;

                comm.Connection.Open();
                SqlDataReader reader = comm.ExecuteReader();
                List<MaterialsVO> allList = Helper.DataReaderMapToList<MaterialsVO>(reader);
                comm.Connection.Close();

                return allList;
            }
        }
        internal List<MaterialsVO> SelectAllByIDsList(List<int> selectedValues)
        {
            StringBuilder sb = new StringBuilder();
            foreach (var item in selectedValues)
            {
                sb.Append(item + "@");
            }
            using (SqlCommand comm = new SqlCommand())
            {
                comm.Connection = new SqlConnection(Connstr);
                comm.CommandText = "GetAllByIDsList";
                comm.CommandType = CommandType.StoredProcedure;
                comm.Parameters.AddWithValue("@parentValues", sb.ToString().Trim('@'));
                comm.Parameters.AddWithValue("@sep", "@");

                comm.Connection.Open();
                SqlDataReader reader = comm.ExecuteReader();
                List<MaterialsVO> allList = Helper.DataReaderMapToList<MaterialsVO>(reader);
                comm.Connection.Close();

                return allList;
            }
        }
        public List<MaterialsBOMConnectVO> SelectAllChilds(List<int> parentValues)
        {
            StringBuilder sb = new StringBuilder();
            foreach (var item in parentValues)
            {
                sb.Append(item + "@");
            }
            using (SqlCommand comm = new SqlCommand())
            {
                comm.Connection = new SqlConnection(Connstr);
                comm.CommandText = "GetAllBOMExistChilds";
                comm.CommandType = CommandType.StoredProcedure;

                comm.Parameters.AddWithValue("@parentValues", sb.ToString().Trim('@'));
                comm.Parameters.AddWithValue("@sep", "@");

                comm.Connection.Open();
                SqlDataReader reader = comm.ExecuteReader();
                List<MaterialsBOMConnectVO> allList = Helper.DataReaderMapToList<MaterialsBOMConnectVO>(reader);
                comm.Connection.Close();

                return allList;
            }
        }
        #endregion

    }
}